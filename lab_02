#include <iostream>
#include <iomanip>

class Vector {
private:
    int dim;
    double* a;

public:
    Vector(int n) : dim(n) {
        a = new double[n];
    }

    ~Vector() {
        delete[] a;
    }

    double& operator[](int i) {
        return a[i];
    }

    friend std::ostream& operator<<(std::ostream& os, const Vector& v);
};

class Matrix {
private:
    int dim;
    double** b;

public:
    Matrix(int n) : dim(n) {
        b = new double*[n];
        for (int i = 0; i < n; i++) {
            b[i] = new double[n];
        }
    }

    ~Matrix() {
        for (int i = 0; i < dim; i++) {
            delete[] b[i];
        }
        delete[] b;
    }

    double* operator[](int i) {
        return b[i];
    }

    friend std::ostream& operator<<(std::ostream& os, const Matrix& m);
};

std::ostream& operator<<(std::ostream& os, const Vector& v) {
    os << "[";
    for (int i = 0; i < v.dim; i++) {
        os << v.a[i] << (i < v.dim - 1 ? ", " : "");
    }
    os << "]";
    return os;
}

std::ostream& operator<<(std::ostream& os, const Matrix& m) {
    os << "[" << std::endl;
    for (int i = 0; i < m.dim; i++) {
        os << "  [";
        for (int j = 0; j < m.dim; j++) {
            os << std::setw(8) << m.b[i][j] << (j < m.dim - 1 ? ", " : "");
        }
        os << "]" << std::endl;
    }
    os << "]";
    return os;
}

int main() {
    Vector v(3);
    v[0] = 1.0;
    v[1] = 2.0;
    v[2] = 3.0;
    std::cout << "Vector: " << v << std::endl;

    Matrix m(3);
    m[0][0] = 1.0;
    m[0][1] = 2.0;
    m[0][2] = 3.0;
    m[1][0] = 4.0;
    m[1][1] = 5.0;
    m[1][2] = 6.0;
    m[2][0] = 7.0;
    m[2][1] = 8.0;
    m[2][2] = 9.0;
    std::cout << "Matrix: " << std::endl << m << std::endl;

    return 0;
}


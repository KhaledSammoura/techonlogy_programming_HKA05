#include <iostream>
#include <cmath>

using namespace std;

// Класс "Вершина"
class Vertex {
protected:
    double x, y; 
    double angle;

public:
    Vertex(double x, double y, double angle) : x(x), y(y), angle(angle) {}

    void move(double dx, double dy) { 
        x += dx;
        y += dy;
    }

    void rotate(double da) { 
        angle += da;
    }

    double getX() const { return x; }
    double getY() const { return y; }
    double getAngle() const { return angle; }
};

// Базовый класс "Геометрический объект"
class GeometricObject {
public:
    virtual void display() = 0; 
    virtual void remove() = 0; 
    virtual void move(double dx, double dy) = 0; // Добавлено
    virtual void rotate(double da) = 0; // Добавлено
};

// Класс "Точка"
class Point : public Vertex {
public:
    Point(double x, double y, double angle) : Vertex(x, y, angle) {}

    void display() {
        cout << "Точка с координатами (" << getX() << ", " << getY() << ") под углом " << getAngle() << " градусов" << endl;
    }

    void remove() {
        cout << "Точка удалена" << endl;
    }

    void move(double dx, double dy) {
        Vertex::move(dx, dy); // Используем метод из Vertex
    }

    void rotate(double da) {
        Vertex::rotate(da); // Используем метод из Vertex
    }
};

// Класс "Линия"
class Line : public GeometricObject {
private:
    double length; 
    Vertex start;

public:
    Line(double x, double y, double angle, double length) : start(x, y, angle), length(length) {}

    void display() override {
        cout << "Линия длиной " << length << " с началом в (" << start.getX() << ", " << start.getY() << ") под углом " << start.getAngle() << " градусов" << endl;
    }

    void remove() override {
        cout << "Линия удалена" << endl;
    }

    void move(double dx, double dy) override {
        start.move(dx, dy);
    }

    void rotate(double da) override {
        start.rotate(da);
    }
};

// Класс "Квадрат"
class Square : public GeometricObject {
private:
    double side; 
    Vertex center;

public:
    Square(double x, double y, double angle, double side) : center(x, y, angle), side(side) {}

    void display() override {
        cout << "Квадрат со стороной " << side << " с центром в (" << center.getX() << ", " << center.getY() << ") под углом " << center.getAngle() << " градусов" << endl;
    }

    void remove() override {
        cout << "Квадрат удален" << endl;
    }

    void move(double dx, double dy) override {
        center.move(dx, dy);
    }

    void rotate(double da) override {
        center.rotate(da);
    }
};

// Класс "Ромб"
class Rhombus : public GeometricObject {
private:
    double diagonal1, diagonal2; 
    Vertex center;

public:
    Rhombus(double x, double y, double angle, double d1, double d2) : center(x, y, angle), diagonal1(d1), diagonal2(d2) {}

    void display() override {
        cout << "Ромб с диагоналями " << diagonal1 << " и " << diagonal2 << " с центром в (" << center.getX() << ", " << center.getY() << ") под углом " << center.getAngle() << " градусов" << endl;
    }

    void remove() override {
        cout << "Ромб удален" << endl;
    }

    void move(double dx, double dy) override {
        center.move(dx, dy);
    }

    void rotate(double da) override {
        center.rotate(da);
    }
};

// Класс "Прямоугольник"
class Rectangle : public GeometricObject {
private:
    double width, height; 
    Vertex center;

public:
    Rectangle(double x, double y, double angle, double w, double h) : center(x, y, angle), width(w), height(h) {}

    void display() override {
        cout << "Прямоугольник с шириной " << width << " и высотой " << height << " с центром в (" << center.getX() << ", " << center.getY() << ") под углом " << center.getAngle() << " градусов" << endl;
    }

    void remove() override {
        cout << "Прямоугольник удален" << endl;
    }

    void move(double dx, double dy) override {
        center.move(dx, dy);
    }

    void rotate(double da) override {
        center.rotate(da);
    }
};

// Класс "Параллелограмм"
class Parallelogram : public GeometricObject {
private:
    double base, height; 
    Vertex center;

public:
    Parallelogram(double x, double y, double angle, double b, double h) : center(x, y, angle), base(b), height(h) {}

    void display() override {
        cout << "Параллелограмм с основанием " << base << " и высотой " << height << " с центром в (" << center.getX() << ", " << center.getY() << ") под углом " << center.getAngle() << " градусов" << endl;
    }

    void remove() override {
        cout << "Параллелограмм удален" << endl;
    }

    void move(double dx, double dy) override {
        center.move(dx, dy);
    }

    void rotate(double da) override {
        center.rotate(da);
    }
};

int main() {
    Point p(1.0, 2.0, 30.0);
    Line l(3.0, 4.0, 45.0, 10.0);
    Square s(5.0, 6.0, 60.0, 4.0);
    Rhombus r(7.0, 8.0, 75.0, 6.0, 8.0);
    Rectangle rec(9.0, 10.0, 90.0, 6.0, 4.0);
    Parallelogram par(11.0, 12.0, 105.0, 8.0, 5.0);

    p.display();
    l.display();
    s.display();
    r.display();
    rec.display();
    par.display();

    p.remove();
    l.remove();
    s.remove();
    r.remove();
    rec.remove();
    par.remove();

    p.move(2.0, 3.0);
    l.rotate(15.0);
    s.move(1.0, 1.0);
    r.rotate(30.0);
    rec.move(2.0, 2.0);
    par.rotate(45.0);

    return 0;
}

